(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{241:function(a,s,t){"use strict";t.r(s);var v=t(0),_=Object(v.a)({},(function(){var a=this,s=a.$createElement,t=a._self._c||s;return t("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[t("h1",{attrs:{id:"深入理解jvm内存区域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#深入理解jvm内存区域"}},[a._v("#")]),a._v(" 深入理解JVM内存区域")]),a._v(" "),t("Counter",{attrs:{path:"backend",name:"深入理解JVM内存区域"}}),a._v(" "),t("h2",{attrs:{id:"一、为什么要了解虚拟机"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、为什么要了解虚拟机"}},[a._v("#")]),a._v(" 一、为什么要了解虚拟机")]),a._v(" "),t("p",[t("code",[a._v("JVM")]),a._v(" 不单单只支持 "),t("code",[a._v("Java")]),a._v(" 语言，也支持其他语言（"),t("code",[a._v("Scala")]),a._v("、"),t("code",[a._v("Kotlin")]),a._v("、"),t("code",[a._v("Groovy")]),a._v(" 等等）")]),a._v(" "),t("p",[a._v("区块链 2.0--以太坊(比特币是区块链 1.0) 中提供了 "),t("code",[a._v("EVM")]),a._v(" 的虚拟机，它的实现和 "),t("code",[a._v("JVM")]),a._v(" 类似，基于栈、生成脚本编译成字节码来执行。知识通用。（理论大于实际）")]),a._v(" "),t("h2",{attrs:{id:"二、虚拟机历史"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、虚拟机历史"}},[a._v("#")]),a._v(" 二、虚拟机历史")]),a._v(" "),t("h3",{attrs:{id:"解释执行和编译执行（针对字节码的执行）"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#解释执行和编译执行（针对字节码的执行）"}},[a._v("#")]),a._v(" 解释执行和编译执行（针对字节码的执行）")]),a._v(" "),t("p",[a._v("解释执行就是边翻译为机器码边执行、即时编译（编译执行）就是先将一个方法中的所有字节码全部编译成机器码之后再执行。")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("Hotspot VM")]),a._v(" （sun）")])]),a._v(" "),t("p",[a._v("采用的是先解释执行，到了一定时机后将热点代码（多次执行、循环等）再翻译成机器码")]),a._v(" "),t("p",[a._v("热点代码探测技术（通过执行计数器找到最有编译价值的代码，如果代码用得非常频繁，就会把这些代码编译成本地代码）。是目前应用最广泛的虚拟机。")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("JRockit VM")]),a._v(" （BEA）")])]),a._v(" "),t("p",[a._v("采取的方法是在执行 "),t("code",[a._v("class")]),a._v(" 时直接编译为机器码（"),t("code",[a._v("Java")]),a._v(" 程序启动速度会比较慢）")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("J9 VM")]),a._v(" （IBM）")])]),a._v(" "),t("p",[a._v("和 "),t("code",[a._v("Hotspot")]),a._v(" 比较接近，主要是用在 "),t("code",[a._v("IBM")]),a._v(" 产品（"),t("code",[a._v("IBM WebSphere")]),a._v(" 和 "),t("code",[a._v("IBM")]),a._v(" 的 "),t("code",[a._v("AIX")]),a._v(" 平台上），华为有的项目用的 "),t("code",[a._v("J9")]),a._v("。")]),a._v(" "),t("ul",[t("li",[t("code",[a._v("Google Android Dalivk VM")]),a._v(" （谷歌）")])]),a._v(" "),t("p",[a._v("使用的寄存器架构，执行 "),t("code",[a._v("dex")]),a._v("（"),t("code",[a._v("Dalvik Executable")]),a._v("）通过 "),t("code",[a._v("class")]),a._v(" 转化而来。")]),a._v(" "),t("h2",{attrs:{id:"三、未来的-java-技术"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、未来的-java-技术"}},[a._v("#")]),a._v(" 三、未来的 Java 技术")]),a._v(" "),t("h3",{attrs:{id:"_1、模块化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、模块化"}},[a._v("#")]),a._v(" 1、模块化")]),a._v(" "),t("p",[t("code",[a._v("OSGI")]),a._v("（动态化、模块化），应用层面就是微服务，互联网的发展方向")]),a._v(" "),t("h3",{attrs:{id:"_2、混合语言"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、混合语言"}},[a._v("#")]),a._v(" 2、混合语言")]),a._v(" "),t("p",[a._v("多个语言都可以运行在 "),t("code",[a._v("JVM")]),a._v(" 中，"),t("code",[a._v("google")]),a._v(" 的 "),t("code",[a._v("Kotlin")]),a._v(" 成为了 "),t("code",[a._v("Android")]),a._v(" 的官方语言。"),t("code",[a._v("Scala")]),a._v("("),t("code",[a._v("Kafka")]),a._v(")")]),a._v(" "),t("h3",{attrs:{id:"_3、多核并行"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、多核并行"}},[a._v("#")]),a._v(" 3、多核并行")]),a._v(" "),t("p",[t("code",[a._v("CPU")]),a._v(" 从高频次转变为多核心，多核时代。"),t("code",[a._v("JDK1.7")]),a._v(" 引入了 "),t("code",[a._v("Fork/Join")]),a._v("，"),t("code",[a._v("JDK1.8")]),a._v(" 提出 "),t("code",[a._v("lambda")]),a._v(" 表达式(函数式编程天生适合并行运行)")]),a._v(" "),t("h3",{attrs:{id:"_4、丰富语法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、丰富语法"}},[a._v("#")]),a._v(" 4、丰富语法")]),a._v(" "),t("p",[t("code",[a._v("JDK5")]),a._v(" 提出自动装箱、泛型(并发编程讲到)、动态注解等语法。"),t("code",[a._v("JDK7")]),a._v(" 二进制原生支持。"),t("code",[a._v("try-catch-finally")]),a._v(" 至 "),t("code",[a._v("try-with-resource")])]),a._v(" "),t("h3",{attrs:{id:"_5、64位"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_5、64位"}},[a._v("#")]),a._v(" 5、64位")]),a._v(" "),t("p",[a._v("虽然同样的程序 64 位内存消耗比 32 位要多一点，但是支持内存大，所以虚拟机都会完全过渡到 64 位，32 位的 "),t("code",[a._v("JVM")]),a._v(" 有 4G 的堆大小限制。")]),a._v(" "),t("h3",{attrs:{id:"_6、更强的垃圾回收器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_6、更强的垃圾回收器"}},[a._v("#")]),a._v(" 6、更强的垃圾回收器")]),a._v(" "),t("p",[a._v("现在主流 "),t("code",[a._v("CMS")]),a._v("、"),t("code",[a._v("G1")]),a._v("。"),t("code",[a._v("JDK11")]),a._v(" 中的 "),t("code",[a._v("–ZGC")]),a._v("（暂停时间不超过 10 毫秒，且不会随着堆的增加而增加，TB 级别的堆回收））。")]),a._v(" "),t("p",[a._v("有色指针、加载屏障。"),t("code",[a._v("JDK12")]),a._v(" 支持并发类卸载，进一步缩短暂停时间 "),t("code",[a._v("JDK13")]),a._v("(计划于 2019 年 9 月)将最大堆大小从 4TB 增加到 16TB")]),a._v(" "),t("h2",{attrs:{id:"四、java-se-体系架构"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、java-se-体系架构"}},[a._v("#")]),a._v(" 四、Java SE 体系架构")]),a._v(" "),t("ul",[t("li",[a._v("JavaSE")])]),a._v(" "),t("p",[t("code",[a._v("Java")]),a._v(" 平台标准版，为 "),t("code",[a._v("Java EE")]),a._v(" 和 "),t("code",[a._v("Java ME")]),a._v(" 提供了基础。")]),a._v(" "),t("ul",[t("li",[a._v("JDK")])]),a._v(" "),t("p",[t("code",[a._v("Java")]),a._v(" 开发工具包，"),t("code",[a._v("JDK")]),a._v(" 是 "),t("code",[a._v("JRE")]),a._v(" 的超集，包含 "),t("code",[a._v("JRE")]),a._v(" 中的所有内容，以及开发程序所需的编译器和调试程序等工具。")]),a._v(" "),t("ul",[t("li",[a._v("JRE")])]),a._v(" "),t("p",[t("code",[a._v("Java SE")]),a._v(" 运行时环境 ，提供库、"),t("code",[a._v("Java")]),a._v(" 虚拟机和其他组件来运行用 "),t("code",[a._v("Java")]),a._v(" 编程语言编写的程序。主要类库，包括：程序部署发布、用户界面工具类、继承库、其他基础库，语言和工具基础库")]),a._v(" "),t("ul",[t("li",[a._v("JVM")])]),a._v(" "),t("p",[t("code",[a._v("java")]),a._v(" 虚拟机，负责 "),t("code",[a._v("Java SE")]),a._v(" 平台的硬件和操作系统无关性、编译执行代码（字节码）和平台安全性")]),a._v(" "),t("h2",{attrs:{id:"五、运行时数据区域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#五、运行时数据区域"}},[a._v("#")]),a._v(" 五、运行时数据区域")]),a._v(" "),t("p",[a._v("这个是抽象概念，内部实现依赖寄存器、高速缓存、主内存（具体要分析 "),t("code",[a._v("JVM")]),a._v(" 源码的 "),t("code",[a._v("C++")]),a._v(" 语言实现）")]),a._v(" "),t("p",[t("code",[a._v("JVM")]),a._v(" 在运行过程中会把它所管理的内存划分成若干不同的数据区域。")]),a._v(" "),t("p",[a._v("线程私有：程序计数器、虚拟机栈、本地方法栈")]),a._v(" "),t("p",[a._v("线程共享：堆、方法区")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://yjtravel-public.oss-cn-beijing.aliyuncs.com/my-blog/basic/jvm.png",alt:"运行时数据区域"}})]),a._v(" "),t("p",[a._v("线程私有是存储指令的，线程共享是存储数据的。")]),a._v(" "),t("p",[a._v("计算机的运行 = 指令 + 数据，指令用于执行方法的，数据用于存放数据和对象的。")]),a._v(" "),t("h3",{attrs:{id:"_1、线程私有的区域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、线程私有的区域"}},[a._v("#")]),a._v(" 1、线程私有的区域")]),a._v(" "),t("h4",{attrs:{id:"_1-程序计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-程序计数器"}},[a._v("#")]),a._v(" (1) 程序计数器")]),a._v(" "),t("p",[a._v("程序执行的计数器。占用较小的内存空间，当前线程执行的字节码的行号指示器；各线程之间独立存储，互不影响。")]),a._v(" "),t("p",[a._v("如果线程正在执行的是一个 "),t("code",[a._v("Java")]),a._v(" 方法，则指向的是当前线程执行的代字节码行数。")]),a._v(" "),t("p",[a._v("如果正在执行的是 "),t("code",[a._v("Natvie")]),a._v(" 方法，这个计数器值则为空（Undefined）")]),a._v(" "),t("p",[a._v("此内存区域是唯一一个不会出现 "),t("code",[a._v("OutOfMemoryError")]),a._v(" 情况的区域。")]),a._v(" "),t("h5",{attrs:{id:"为什么需要程序计数器"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要程序计数器"}},[a._v("#")]),a._v(" 为什么需要程序计数器")]),a._v(" "),t("p",[a._v("因为 "),t("code",[a._v("Java")]),a._v(" 是多线程的，当需要线程切换的时候需要确保多线程情况下程序能够正确执行，需要记录正在执行代码字节的行数。")]),a._v(" "),t("h4",{attrs:{id:"_2-虚拟机栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-虚拟机栈"}},[a._v("#")]),a._v(" (2) 虚拟机栈")]),a._v(" "),t("p",[a._v("存储"),t("strong",[a._v("当前线程")]),a._v("运行方法所需要的数据、指令和返回地址。")]),a._v(" "),t("p",[a._v("栈数据结构的特点和 "),t("code",[a._v("Java")]),a._v(" 中方法中调用方法的特性一致。")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("StackFilo")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("main")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" args"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// a() -> b() -> c()")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("a")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"A开始"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 此处省略100行代码")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 调用 b() 方法")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("b")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"A结束"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("b")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"B开始"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 此处省略100行代码")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 调用 c() 方法")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("c")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"B结束"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("c")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"C开始"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token comment"}},[a._v("// 此处省略100行代码")]),a._v("\n        "),t("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("out"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("println")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token string"}},[a._v('"C结束"')]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br"),t("span",{staticClass:"line-number"},[a._v("18")]),t("br"),t("span",{staticClass:"line-number"},[a._v("19")]),t("br"),t("span",{staticClass:"line-number"},[a._v("20")]),t("br"),t("span",{staticClass:"line-number"},[a._v("21")]),t("br"),t("span",{staticClass:"line-number"},[a._v("22")]),t("br"),t("span",{staticClass:"line-number"},[a._v("23")]),t("br"),t("span",{staticClass:"line-number"},[a._v("24")]),t("br"),t("span",{staticClass:"line-number"},[a._v("25")]),t("br"),t("span",{staticClass:"line-number"},[a._v("26")]),t("br"),t("span",{staticClass:"line-number"},[a._v("27")]),t("br"),t("span",{staticClass:"line-number"},[a._v("28")]),t("br"),t("span",{staticClass:"line-number"},[a._v("29")]),t("br")])]),t("p",[a._v("上面代码依次入栈的方法为 "),t("code",[a._v("a()")]),a._v(" -> "),t("code",[a._v("b()")]),a._v(" -> "),t("code",[a._v("c()")]),a._v("，出栈的顺序为 "),t("code",[a._v("c()")]),a._v(" -> "),t("code",[a._v("b()")]),a._v(" -> "),t("code",[a._v("a()")])]),a._v(" "),t("p",[a._v("当线程请求的栈深度大于虚拟机所允许的深度时，会抛出 "),t("code",[a._v("StackOverflowError")]),a._v(" 异常。")]),a._v(" "),t("p",[a._v("当 "),t("code",[a._v("JVM")]),a._v(" 动态扩展时无法申请到足够的内存时，会抛出 "),t("code",[a._v("OutOfMemoryError")]),a._v(" 异常。")]),a._v(" "),t("p",[t("code",[a._v("虚拟机栈")]),a._v(" 是每个线程私有的，线程在运行时，在执行每个方法的时候都会打包成一个"),t("code",[a._v("栈帧")]),a._v("，存储了局部变量表，操作数栈，动态链接，方法出口等信息，然后放入栈。每个时刻正在执行的当前方法就是虚拟机栈顶的栈桢。方法的执行就对应着栈帧在虚拟机栈中入栈和出栈的过程。")]),a._v(" "),t("p",[t("code",[a._v("虚拟机栈")]),a._v(" 的大小缺省为 "),t("code",[a._v("1M")]),a._v("，可用参数 "),t("code",[a._v("–Xss")]),a._v(" 调整大小，例如 "),t("code",[a._v("-Xss256k")]),a._v("。")]),a._v(" "),t("p",[a._v("在编译程序代码的时候，栈帧中需要多大的局部变量表，多深的操作数栈都已经完全确定了，并且写入到方法表的 "),t("code",[a._v("Code")]),a._v(" 属性之中，因此一个栈帧需要分配多少内存，不会受到程序运行期变量数据的影响，而仅仅取决于具体的虚拟机实现。")]),a._v(" "),t("p",[a._v("通过 "),t("code",[a._v("javap -v xxx.class > xxx.txt")]),a._v(" 可以将 "),t("code",[a._v("class")]),a._v(" 文件信息转化为一个文本信息，在文本信息中包含着字节码的信息。")]),a._v(" "),t("p",[a._v("在字节码的方法中会包含一个 "),t("code",[a._v("Code")]),a._v(" 属性的数据，下面举例介绍里面的几种语法：")]),a._v(" "),t("p",[a._v("例如 "),t("code",[a._v("Java")]),a._v(" 代码如下：")]),a._v(" "),t("div",{staticClass:"language-java line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-java"}},[t("code",[a._v("    "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[a._v("use")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),t("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" money"),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        money "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" money "),t("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),a._v(" "),t("span",{pre:!0,attrs:{class:"token number"}},[a._v("100")]),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),t("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br")])]),t("p",[a._v("通过上述指令执行后生成的文件中 "),t("code",[a._v("use()")]),a._v(" 方法对应的内容如下：")]),a._v(" "),t("div",{staticClass:"language-text line-numbers-mode"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[a._v("  public void use(int);\n    descriptor: (I)V\n    flags: ACC_PUBLIC\n    Code:\n      stack=2, locals=2, args_size=2\n         0: iload_1\n         1: bipush        100\n         3: isub\n         4: istore_1\n         5: return\n      LineNumberTable:\n        line 28: 0\n        line 29: 5\n      LocalVariableTable:\n        Start  Length  Slot  Name   Signature\n            0       6     0  this   Lcom/jerry/ch1/JavaStack;\n            0       6     1 money   I\n")])]),a._v(" "),t("div",{staticClass:"line-numbers-wrapper"},[t("span",{staticClass:"line-number"},[a._v("1")]),t("br"),t("span",{staticClass:"line-number"},[a._v("2")]),t("br"),t("span",{staticClass:"line-number"},[a._v("3")]),t("br"),t("span",{staticClass:"line-number"},[a._v("4")]),t("br"),t("span",{staticClass:"line-number"},[a._v("5")]),t("br"),t("span",{staticClass:"line-number"},[a._v("6")]),t("br"),t("span",{staticClass:"line-number"},[a._v("7")]),t("br"),t("span",{staticClass:"line-number"},[a._v("8")]),t("br"),t("span",{staticClass:"line-number"},[a._v("9")]),t("br"),t("span",{staticClass:"line-number"},[a._v("10")]),t("br"),t("span",{staticClass:"line-number"},[a._v("11")]),t("br"),t("span",{staticClass:"line-number"},[a._v("12")]),t("br"),t("span",{staticClass:"line-number"},[a._v("13")]),t("br"),t("span",{staticClass:"line-number"},[a._v("14")]),t("br"),t("span",{staticClass:"line-number"},[a._v("15")]),t("br"),t("span",{staticClass:"line-number"},[a._v("16")]),t("br"),t("span",{staticClass:"line-number"},[a._v("17")]),t("br")])]),t("p",[a._v("在 "),t("code",[a._v("Code")]),a._v(" 属性中有一些指令，指令左边的数字代表的就是指令的行号。因为虚拟机在执行指令的过程中可能还在做一些其它的工作，所以行号没有连续。")]),a._v(" "),t("table",[t("thead",[t("tr",[t("th",[a._v("行号")]),a._v(" "),t("th",[a._v("指令")]),a._v(" "),t("th",[a._v("含义")])])]),a._v(" "),t("tbody",[t("tr",[t("td",[a._v("0")]),a._v(" "),t("td",[a._v("iload_1")]),a._v(" "),t("td",[a._v("将下标为1的 "),t("code",[a._v("int")]),a._v(" 型局部变量进栈")])]),a._v(" "),t("tr",[t("td",[a._v("1")]),a._v(" "),t("td",[a._v("bipush")]),a._v(" "),t("td",[a._v("将一个 "),t("code",[a._v("byte")]),a._v(" 型常量（100）值推送至栈顶")])]),a._v(" "),t("tr",[t("td",[a._v("3")]),a._v(" "),t("td",[a._v("isub")]),a._v(" "),t("td",[a._v("栈顶两个 "),t("code",[a._v("int")]),a._v(" 行数值相减（后入栈的 - 前入栈的），并且结果进栈")])]),a._v(" "),t("tr",[t("td",[a._v("4")]),a._v(" "),t("td",[a._v("istore_1")]),a._v(" "),t("td",[a._v("将栈顶 "),t("code",[a._v("int")]),a._v(" 型数值存入第2个局部变量")])])])]),a._v(" "),t("ul",[t("li",[a._v("局部变量表（LocalVariableTable）")])]),a._v(" "),t("p",[a._v("顾名思义就是局部变量的表，用于存放我们的局部变量的。首先它是一个 32 位的长度，主要存放我们的 "),t("code",[a._v("Java")]),a._v(" 的八大基础数据类型，一般 32位就可以存放下，如果是 64 位的就使用高低位占用两个也可以存放下，如果是局部的一些对象，比如我们的 "),t("code",[a._v("Object")]),a._v(" 对象，我们只需要存放它的一个引用地址即可。（基本数据类型、对象引用、"),t("code",[a._v("returnAddress")]),a._v(" 类型）")]),a._v(" "),t("ul",[t("li",[a._v("操作数栈")])]),a._v(" "),t("p",[a._v("存放我们方法执行的操作数的，它就是一个栈，先进后出的栈结构，操作数栈，就是用来操作的，操作的的元素可以是任意的 "),t("code",[a._v("Java")]),a._v(" 数据类型，所以我们知道一个方法刚刚开始的时候，这个方法的操作数栈就是空的，操作数栈运行方法是会一直运行入栈/出栈的操作")]),a._v(" "),t("ul",[t("li",[a._v("动态连接")])]),a._v(" "),t("p",[t("code",[a._v("Java")]),a._v(" 语言特性多态（需要类加载、运行时才能确定具体的方法，后续有详细的讲解）")]),a._v(" "),t("ul",[t("li",[a._v("返回地址")])]),a._v(" "),t("p",[a._v("正常返回（调用程序计数器中的地址作为返回）三步曲")]),a._v(" "),t("ol",[t("li",[a._v("恢复上层方法的局部变量表和操作数栈")]),a._v(" "),t("li",[a._v("把返回值（如果有的话）压入调用者栈帧的操作数栈中")]),a._v(" "),t("li",[a._v("调整 "),t("code",[a._v("PC")]),a._v(" 计数器的值以指向方法调用指令后面的一条指令")])]),a._v(" "),t("p",[a._v("异常的话（通过异常处理器表（非栈帧中的）来确定）")]),a._v(" "),t("h4",{attrs:{id:"_3-本地方法栈"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3-本地方法栈"}},[a._v("#")]),a._v(" (3) 本地方法栈")]),a._v(" "),t("p",[a._v("本地方法栈保存的是 "),t("code",[a._v("native")]),a._v(" 方法的信息，例如 "),t("code",[a._v("Object")]),a._v(" 的 "),t("code",[a._v("hashCode()")]),a._v(" 方法，当一个 "),t("code",[a._v("JVM")]),a._v(" 创建的线程调用 "),t("code",[a._v("native")]),a._v(" 方法后，"),t("code",[a._v("JVM")]),a._v(" 不再为其在虚拟机栈中创建栈帧，"),t("code",[a._v("JVM")]),a._v(" 只是简单地动态链接并直接调用 "),t("code",[a._v("native")]),a._v(" 方法")]),a._v(" "),t("p",[a._v("执行本地方法。各虚拟机自己实现，本地方法栈 "),t("code",[a._v("native")]),a._v(" 方法调用 "),t("code",[a._v("JNI")]),a._v(" 到了底层的 "),t("code",[a._v("C")]),a._v("/"),t("code",[a._v("C++")]),a._v("("),t("code",[a._v("C")]),a._v("/"),t("code",[a._v("C++")]),a._v(" 可以触发汇编语言，然后驱动硬件)")]),a._v(" "),t("h3",{attrs:{id:"_2、线程共享的区域"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、线程共享的区域"}},[a._v("#")]),a._v(" 2、线程共享的区域")]),a._v(" "),t("h4",{attrs:{id:"_1-方法区"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1-方法区"}},[a._v("#")]),a._v(" (1) 方法区")]),a._v(" "),t("p",[a._v("存储的内容：类信息、常量、静态常量、即时编译期编译后的代码。")]),a._v(" "),t("p",[a._v('用于存储已经被虚拟机加载的类信息，常量（"zdy","123"等），静态变量（'),t("code",[a._v("static")]),a._v(" 变量）等数据，可用以下参数调整：")]),a._v(" "),t("p",[t("code",[a._v("JDK1.7")]),a._v(" 及以前叫永久代，"),t("code",[a._v("JDK1.8")]),a._v(" 及以后叫元空间。")]),a._v(" "),t("p",[t("code",[a._v("jdk1.7")]),a._v(" 及以前："),t("code",[a._v("-XX:PermSize")]),a._v("；"),t("code",[a._v("-XX:MaxPermSize")])]),a._v(" "),t("p",[t("code",[a._v("jdk1.8")]),a._v(" 以后："),t("code",[a._v("-XX:MetaspaceSize")]),a._v("； "),t("code",[a._v("-XX:MaxMetaspaceSize")])]),a._v(" "),t("p",[t("code",[a._v("jdk1.8")]),a._v(" 以后大小就只受本机总内存的限制")]),a._v(" "),t("p",[a._v("如："),t("code",[a._v("-XX:MaxMetaspaceSize=3M")])]),a._v(" "),t("h4",{attrs:{id:"_2-java堆"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2-java堆"}},[a._v("#")]),a._v(" (2) Java堆")]),a._v(" "),t("p",[a._v("几乎所有对象都分配在这里，也是垃圾回收发生的主要区域，可用以下参数调整：")]),a._v(" "),t("p",[t("code",[a._v("-Xms")]),a._v("：堆的最小值；")]),a._v(" "),t("p",[t("code",[a._v("-Xmx")]),a._v("：堆的最大值；")]),a._v(" "),t("p",[t("code",[a._v("-Xmn")]),a._v("：新生代的大小；")]),a._v(" "),t("p",[t("code",[a._v("-XX:NewSize")]),a._v("；新生代最小值；")]),a._v(" "),t("p",[t("code",[a._v("-XX:MaxNewSize")]),a._v("：新生代最大值；")]),a._v(" "),t("p",[a._v("例如运行时设置堆的最大值为256m的参数： "),t("code",[a._v("-Xmx256m")])]),a._v(" "),t("h2",{attrs:{id:"六、jvm各版本内存区域的变化"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#六、jvm各版本内存区域的变化"}},[a._v("#")]),a._v(" 六、JVM各版本内存区域的变化")]),a._v(" "),t("p",[a._v("运行时常量池是指： "),t("code",[a._v("Class")]),a._v(" 文件中的常量池（编译器生成的各种字面量和符号引用）在类加载后被放入的区域")]),a._v(" "),t("p",[a._v("字面量："),t("code",[a._v('String a = "我是字面量"')]),a._v(" 中的 "),t("code",[a._v('"我是字面量"')]),a._v(" 就是字面量。")]),a._v(" "),t("ul",[t("li",[a._v("jdk1.6")])]),a._v(" "),t("p",[a._v("运行时常量池在方法区中")]),a._v(" "),t("ul",[t("li",[a._v("jdk1.7")])]),a._v(" "),t("p",[a._v("运行时常量池在堆中")]),a._v(" "),t("ul",[t("li",[a._v("jdk1.8")])]),a._v(" "),t("p",[a._v("去永久代：原来的永久代占用的内存可能还会与堆有相互的关系，但是使用元空间后大小只受制于机器的内存，为什么这么做呢？永久代来存储类信息、常量、静态变量等数据不是个好主意, 很容易遇到内存溢出的问题。\n对永久代进行调优是很困难的，同时将元空间与堆的垃圾回收进行了隔离，避免永久代引发的 "),t("code",[a._v("Full GC")]),a._v(" 和 "),t("code",[a._v("OOM")]),a._v(" 等问题；")]),a._v(" "),t("h2",{attrs:{id:"七，直接内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#七，直接内存"}},[a._v("#")]),a._v(" 七，直接内存")]),a._v(" "),t("p",[a._v("不是虚拟机运行时数据区的一部分，也不是 "),t("code",[a._v("Java")]),a._v(" 虚拟机规范中定义的内存区域，它是 "),t("code",[a._v("JVM")]),a._v(" 无法直接管理的内存。")]),a._v(" "),t("p",[t("img",{attrs:{src:"https://yjtravel-public.oss-cn-beijing.aliyuncs.com/my-blog/basic/jvm2.png",alt:"JVM内存区域模型"}})]),a._v(" "),t("p",[a._v("如果使用了 "),t("code",[a._v("NIO")]),a._v(",这块区域会被频繁使用，在 "),t("code",[a._v("Java")]),a._v(" 堆内可以用 "),t("code",[a._v("directByteBuffer")]),a._v(" 对象直接引用并操作；")]),a._v(" "),t("p",[a._v("这块内存不受 "),t("code",[a._v("Java")]),a._v(" 堆大小限制，但受本机总内存的限制，可以通过 "),t("code",[a._v("MaxDirectMemorySize")]),a._v(" 来设置（默认与堆内存最大值一样），所以也会出现 "),t("code",[a._v("OOM")]),a._v(" 异常；")]),a._v(" "),t("p",[a._v("避免了在 "),t("code",[a._v("Java")]),a._v(" 堆和 "),t("code",[a._v("Native")]),a._v(" 堆中来回复制数据，能够提高效率")]),a._v(" "),t("Valine")],1)}),[],!1,null,null,null);s.default=_.exports}}]);